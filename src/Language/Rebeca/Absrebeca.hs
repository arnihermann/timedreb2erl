{-# LANGUAGE DeriveDataTypeable #-}
module Language.Rebeca.Absrebeca where

import Data.Generics
-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show,Data,Typeable)
data Model =
   Model [EnvVar] [ReactiveClass] Main
  deriving (Eq,Ord,Show,Data,Typeable)

data EnvVar =
   EnvVar TypedParameter
  deriving (Eq,Ord,Show,Data,Typeable)

data ReactiveClass =
   ReactiveClass Ident Integer KnownRebecs StateVars MsgSrvInit [MsgSrv]
  deriving (Eq,Ord,Show,Data,Typeable)

data KnownRebecs =
   NoKnownRebecs
 | KnownRebecs [TypedVarDecl]
  deriving (Eq,Ord,Show,Data,Typeable)

data StateVars =
   NoStateVars
 | StateVars [TypedVarDecl]
  deriving (Eq,Ord,Show,Data,Typeable)

data MsgSrvInit =
   MsgSrvInit [TypedParameter] [Stm]
  deriving (Eq,Ord,Show,Data,Typeable)

data MsgSrv =
   MsgSrv Ident [TypedParameter] [Stm]
  deriving (Eq,Ord,Show,Data,Typeable)

data VarDecl =
   VDeclAssign Ident Exp
 | VDecl Ident
  deriving (Eq,Ord,Show,Data,Typeable)

data TypedVarDecl =
   TypedVarDecl TypeName Ident
 | TypedVarDeclAss TypeName Ident Exp
  deriving (Eq,Ord,Show,Data,Typeable)

data TypedParameter =
   TypedParameter TypeName Ident
  deriving (Eq,Ord,Show,Data,Typeable)

data BasicType =
   Tint
 | Ttime
 | Tboolean
  deriving (Eq,Ord,Show,Data,Typeable)

data TypeName =
   BuiltIn BasicType
 | ClassType Ident
  deriving (Eq,Ord,Show,Data,Typeable)

data Stm =
   Ass Ident AssignmentOp Exp
 | Local TypedVarDecl
 | Call Ident Ident [Exp] After Deadline
 | Delay Exp
 | Sel Exp CompStm [ElseifStm] ElseStm
  deriving (Eq,Ord,Show,Data,Typeable)

data CompStm =
   SingleCompoundStm Stm
 | MultCompoundStm [Stm]
  deriving (Eq,Ord,Show,Data,Typeable)

data After =
   NoAfter
 | WithAfter Exp
  deriving (Eq,Ord,Show,Data,Typeable)

data Deadline =
   NoDeadline
 | WithDeadline Exp
  deriving (Eq,Ord,Show,Data,Typeable)

data ElseifStm =
   ElseifStm Exp CompStm
  deriving (Eq,Ord,Show,Data,Typeable)

data ElseStm =
   EmptyElseStm
 | ElseStm CompStm
  deriving (Eq,Ord,Show,Data,Typeable)

data Exp =
   Elor Exp Exp
 | Eland Exp Exp
 | Ebitor Exp Exp
 | Ebitexor Exp Exp
 | Ebitand Exp Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elthen Exp Exp
 | Egrthen Exp Exp
 | Ele Exp Exp
 | Ege Exp Exp
 | Eleft Exp Exp
 | Eright Exp Exp
 | Eplus Exp Exp
 | Eminus Exp Exp
 | Etimes Exp Exp
 | Ediv Exp Exp
 | Emod Exp Exp
 | Eexpcoercion Exp
 | ENondet [Exp]
 | Epreop UnaryOperator Exp
 | Enow
 | Econst Constant
 | Evar [Ident]
  deriving (Eq,Ord,Show,Data,Typeable)

data Constant =
   Eint Integer
 | Etrue
 | Efalse
  deriving (Eq,Ord,Show,Data,Typeable)

data UnaryOperator =
   Plus
 | Negative
 | Complement
 | Logicalneg
  deriving (Eq,Ord,Show,Data,Typeable)

data AssignmentOp =
   Assign
 | AssignMul
 | AssignDiv
 | AssignMod
 | AssignAdd
 | AssignSub
  deriving (Eq,Ord,Show,Data,Typeable)

data Main =
   Main [InstanceDecl]
  deriving (Eq,Ord,Show,Data,Typeable)

data InstanceDecl =
   InstanceDecl TypedVarDecl [VarDecl] [Exp]
  deriving (Eq,Ord,Show,Data,Typeable)

