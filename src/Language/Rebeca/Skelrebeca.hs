module Language.Rebeca.Skelrebeca where

-- Haskell module generated by the BNF converter

import Language.Rebeca.Absrebeca
import Language.Rebeca.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transModel :: Model -> Result
transModel x = case x of
  Model envvars reactiveclasss main  -> failure x


transEnvVar :: EnvVar -> Result
transEnvVar x = case x of
  EnvVar typedparameter  -> failure x


transReactiveClass :: ReactiveClass -> Result
transReactiveClass x = case x of
  ReactiveClass id n knownrebecs statevars msgsrvinit msgsrvs  -> failure x


transKnownRebecs :: KnownRebecs -> Result
transKnownRebecs x = case x of
  NoKnownRebecs  -> failure x
  KnownRebecs typedvardecls  -> failure x


transStateVars :: StateVars -> Result
transStateVars x = case x of
  NoStateVars  -> failure x
  StateVars typedvardecls  -> failure x


transMsgSrvInit :: MsgSrvInit -> Result
transMsgSrvInit x = case x of
  MsgSrvInit typedparameters stms  -> failure x


transMsgSrv :: MsgSrv -> Result
transMsgSrv x = case x of
  MsgSrv id typedparameters stms  -> failure x


transVarDecl :: VarDecl -> Result
transVarDecl x = case x of
  VDeclAssign id exp  -> failure x
  VDecl id  -> failure x


transTypedVarDecl :: TypedVarDecl -> Result
transTypedVarDecl x = case x of
  TypedVarDecl typename id  -> failure x
  TypedVarDeclAss typename id exp  -> failure x


transTypedParameter :: TypedParameter -> Result
transTypedParameter x = case x of
  TypedParameter typename id  -> failure x


transBasicType :: BasicType -> Result
transBasicType x = case x of
  Tint  -> failure x
  Ttime  -> failure x
  Tboolean  -> failure x


transTypeName :: TypeName -> Result
transTypeName x = case x of
  BuiltIn basictype  -> failure x
  ClassType id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  Ass id assignmentop exp  -> failure x
  Local typedvardecl  -> failure x
  Call id0 id exps after deadline  -> failure x
  Delay exp  -> failure x
  Sel exp compstm elseifstms elsestm  -> failure x


transCompStm :: CompStm -> Result
transCompStm x = case x of
  SingleCompoundStm stm  -> failure x
  MultCompoundStm stms  -> failure x


transAfter :: After -> Result
transAfter x = case x of
  NoAfter  -> failure x
  WithAfter exp  -> failure x


transDeadline :: Deadline -> Result
transDeadline x = case x of
  NoDeadline  -> failure x
  WithDeadline exp  -> failure x


transElseifStm :: ElseifStm -> Result
transElseifStm x = case x of
  ElseifStm exp compstm  -> failure x


transElseStm :: ElseStm -> Result
transElseStm x = case x of
  EmptyElseStm  -> failure x
  ElseStm compstm  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Elor exp0 exp  -> failure x
  Eland exp0 exp  -> failure x
  Ebitor exp0 exp  -> failure x
  Ebitexor exp0 exp  -> failure x
  Ebitand exp0 exp  -> failure x
  Eeq exp0 exp  -> failure x
  Eneq exp0 exp  -> failure x
  Elthen exp0 exp  -> failure x
  Egrthen exp0 exp  -> failure x
  Ele exp0 exp  -> failure x
  Ege exp0 exp  -> failure x
  Eleft exp0 exp  -> failure x
  Eright exp0 exp  -> failure x
  Eplus exp0 exp  -> failure x
  Eminus exp0 exp  -> failure x
  Etimes exp0 exp  -> failure x
  Ediv exp0 exp  -> failure x
  Emod exp0 exp  -> failure x
  Eexpcoercion exp  -> failure x
  ENondet exps  -> failure x
  Epreop unaryoperator exp  -> failure x
  Enow  -> failure x
  Econst constant  -> failure x
  Evar ids  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x


transUnaryOperator :: UnaryOperator -> Result
transUnaryOperator x = case x of
  Plus  -> failure x
  Negative  -> failure x
  Complement  -> failure x
  Logicalneg  -> failure x


transAssignmentOp :: AssignmentOp -> Result
transAssignmentOp x = case x of
  Assign  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x
  AssignMod  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x


transMain :: Main -> Result
transMain x = case x of
  Main instancedecls  -> failure x


transInstanceDecl :: InstanceDecl -> Result
transInstanceDecl x = case x of
  InstanceDecl typedvardecl vardecls exps  -> failure x



