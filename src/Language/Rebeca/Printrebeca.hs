{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Language.Rebeca.Printrebeca where

-- pretty-printer generated by the BNF converter

import Language.Rebeca.Absrebeca
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ".") , prt 0 xs])



instance Print Model where
  prt i e = case e of
   Model envvars reactiveclasss main -> prPrec i 0 (concatD [prt 0 envvars , prt 0 reactiveclasss , prt 0 main])


instance Print EnvVar where
  prt i e = case e of
   EnvVar typedparameter -> prPrec i 0 (concatD [doc (showString "env") , prt 0 typedparameter , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ReactiveClass where
  prt i e = case e of
   ReactiveClass id n knownrebecs statevars msgsrvinit msgsrvs -> prPrec i 0 (concatD [doc (showString "reactiveclass") , prt 0 id , doc (showString "(") , prt 0 n , doc (showString ")") , doc (showString "{") , prt 0 knownrebecs , prt 0 statevars , prt 0 msgsrvinit , prt 0 msgsrvs , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print KnownRebecs where
  prt i e = case e of
   NoKnownRebecs  -> prPrec i 0 (concatD [])
   KnownRebecs typedvardecls -> prPrec i 0 (concatD [doc (showString "knownrebecs") , doc (showString "{") , prt 0 typedvardecls , doc (showString "}")])


instance Print StateVars where
  prt i e = case e of
   NoStateVars  -> prPrec i 0 (concatD [])
   StateVars typedvardecls -> prPrec i 0 (concatD [doc (showString "statevars") , doc (showString "{") , prt 0 typedvardecls , doc (showString "}")])


instance Print MsgSrvInit where
  prt i e = case e of
   MsgSrvInit typedparameters stms -> prPrec i 0 (concatD [doc (showString "msgsrv") , doc (showString "initial") , doc (showString "(") , prt 0 typedparameters , doc (showString ")") , doc (showString "{") , prt 0 stms , doc (showString "}")])


instance Print MsgSrv where
  prt i e = case e of
   MsgSrv id typedparameters stms -> prPrec i 0 (concatD [doc (showString "msgsrv") , prt 0 id , doc (showString "(") , prt 0 typedparameters , doc (showString ")") , doc (showString "{") , prt 0 stms , doc (showString "}")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print VarDecl where
  prt i e = case e of
   VDeclAssign id exp -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 exp])
   VDecl id -> prPrec i 0 (concatD [prt 0 id])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print TypedVarDecl where
  prt i e = case e of
   TypedVarDecl typename id -> prPrec i 0 (concatD [prt 0 typename , prt 0 id])
   TypedVarDeclAss typename id exp -> prPrec i 0 (concatD [prt 0 typename , prt 0 id , doc (showString "=") , prt 0 exp])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print TypedParameter where
  prt i e = case e of
   TypedParameter typename id -> prPrec i 0 (concatD [prt 0 typename , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print BasicType where
  prt i e = case e of
   Tint  -> prPrec i 0 (concatD [doc (showString "int")])
   Ttime  -> prPrec i 0 (concatD [doc (showString "time")])
   Tboolean  -> prPrec i 0 (concatD [doc (showString "boolean")])


instance Print TypeName where
  prt i e = case e of
   BuiltIn basictype -> prPrec i 0 (concatD [prt 0 basictype])
   ClassType id -> prPrec i 0 (concatD [prt 0 id])


instance Print Stm where
  prt i e = case e of
   Ass id assignmentop exp -> prPrec i 0 (concatD [prt 0 id , prt 0 assignmentop , prt 0 exp , doc (showString ";")])
   Local typedvardecl -> prPrec i 0 (concatD [prt 0 typedvardecl , doc (showString ";")])
   Call id0 id exps after deadline -> prPrec i 0 (concatD [prt 0 id0 , doc (showString ".") , prt 0 id , doc (showString "(") , prt 0 exps , doc (showString ")") , prt 0 after , prt 0 deadline , doc (showString ";")])
   Delay exp -> prPrec i 0 (concatD [doc (showString "delay") , doc (showString "(") , prt 0 exp , doc (showString ")") , doc (showString ";")])
   Sel exp compstm elseifstms elsestm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 compstm , prt 0 elseifstms , prt 0 elsestm])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print CompStm where
  prt i e = case e of
   SingleCompoundStm stm -> prPrec i 0 (concatD [prt 0 stm])
   MultCompoundStm stms -> prPrec i 0 (concatD [doc (showString "{") , prt 0 stms , doc (showString "}")])


instance Print After where
  prt i e = case e of
   NoAfter  -> prPrec i 0 (concatD [])
   WithAfter exp -> prPrec i 0 (concatD [doc (showString "after") , doc (showString "(") , prt 0 exp , doc (showString ")")])


instance Print Deadline where
  prt i e = case e of
   NoDeadline  -> prPrec i 0 (concatD [])
   WithDeadline exp -> prPrec i 0 (concatD [doc (showString "deadline") , doc (showString "(") , prt 0 exp , doc (showString ")")])


instance Print ElseifStm where
  prt i e = case e of
   ElseifStm exp compstm -> prPrec i 0 (concatD [doc (showString "else if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 compstm])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print ElseStm where
  prt i e = case e of
   EmptyElseStm  -> prPrec i 0 (concatD [])
   ElseStm compstm -> prPrec i 0 (concatD [doc (showString "else") , prt 0 compstm])


instance Print Exp where
  prt i e = case e of
   Elor exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString "||") , prt 2 exp])
   Eland exp0 exp -> prPrec i 2 (concatD [prt 2 exp0 , doc (showString "&&") , prt 3 exp])
   Ebitor exp0 exp -> prPrec i 3 (concatD [prt 3 exp0 , doc (showString "|") , prt 4 exp])
   Ebitexor exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "^") , prt 5 exp])
   Ebitand exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "&") , prt 6 exp])
   Eeq exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "==") , prt 7 exp])
   Eneq exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "!=") , prt 7 exp])
   Elthen exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString "<") , prt 8 exp])
   Egrthen exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString ">") , prt 8 exp])
   Ele exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString "<=") , prt 8 exp])
   Ege exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString ">=") , prt 8 exp])
   Eleft exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "<<") , prt 9 exp])
   Eright exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString ">>") , prt 9 exp])
   Eplus exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "+") , prt 10 exp])
   Eminus exp0 exp -> prPrec i 9 (concatD [prt 9 exp0 , doc (showString "-") , prt 10 exp])
   Etimes exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "*") , prt 11 exp])
   Ediv exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "/") , prt 11 exp])
   Emod exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "%") , prt 11 exp])
   Eexpcoercion exp -> prPrec i 11 (concatD [doc (showString "(") , prt 0 exp , doc (showString ")")])
   ENondet exps -> prPrec i 11 (concatD [doc (showString "?") , doc (showString "(") , prt 0 exps , doc (showString ")")])
   Epreop unaryoperator exp -> prPrec i 12 (concatD [prt 0 unaryoperator , prt 11 exp])
   Enow  -> prPrec i 13 (concatD [doc (showString "now") , doc (showString "(") , doc (showString ")")])
   Econst constant -> prPrec i 13 (concatD [prt 0 constant])
   Evar ids -> prPrec i 14 (concatD [prt 0 ids])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Constant where
  prt i e = case e of
   Eint n -> prPrec i 0 (concatD [prt 0 n])
   Etrue  -> prPrec i 0 (concatD [doc (showString "true")])
   Efalse  -> prPrec i 0 (concatD [doc (showString "false")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print UnaryOperator where
  prt i e = case e of
   Plus  -> prPrec i 0 (concatD [doc (showString "+")])
   Negative  -> prPrec i 0 (concatD [doc (showString "-")])
   Complement  -> prPrec i 0 (concatD [doc (showString "~")])
   Logicalneg  -> prPrec i 0 (concatD [doc (showString "!")])


instance Print AssignmentOp where
  prt i e = case e of
   Assign  -> prPrec i 0 (concatD [doc (showString "=")])
   AssignMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssignDiv  -> prPrec i 0 (concatD [doc (showString "/=")])
   AssignMod  -> prPrec i 0 (concatD [doc (showString "%=")])
   AssignAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssignSub  -> prPrec i 0 (concatD [doc (showString "-=")])


instance Print Main where
  prt i e = case e of
   Main instancedecls -> prPrec i 0 (concatD [doc (showString "main") , doc (showString "{") , prt 0 instancedecls , doc (showString "}")])


instance Print InstanceDecl where
  prt i e = case e of
   InstanceDecl typedvardecl vardecls exps -> prPrec i 0 (concatD [prt 0 typedvardecl , doc (showString "(") , prt 0 vardecls , doc (showString ")") , doc (showString ":") , doc (showString "(") , prt 0 exps , doc (showString ")")])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])


